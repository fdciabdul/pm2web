<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <script src="/socket.io/socket.io.js"></script>
  <style>
    :root {
      --primary-color: #0052CC;
      --primary-dark: #003D99;
      --primary-light: #4C9AFF;
      --secondary-color: #505F79;
      --success-color: #36B37E;
      --warning-color: #FFAB00;
      --danger-color: #FF5630;
      --dark-bg: #0A1929;
      --card-bg: #132F4C;
      --border-color: #1E4976;
      --text-color: #F4F5F7;
      --text-muted: #A6B5C9;
      --shadow-color: rgba(0, 82, 204, 0.2);
    }
    
    body {
      background-color: var(--dark-bg);
      color: var(--text-color);
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
      line-height: 1.5;
      min-height: 100vh;
      position: relative;
    }
    
    .navbar {
      background-color: var(--card-bg);
      border-bottom: 1px solid var(--border-color);
      padding: 0.6rem 1rem;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    }
    
    .navbar-brand {
      font-weight: 700;
      color: var(--text-color);
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 1.25rem;
      letter-spacing: 1px;
    }
    
    .navbar-brand i {
      color: var(--primary-light);
    }
    
    .card {
      border: none;
      border-radius: 6px;
      background-color: var(--card-bg);
      margin-bottom: 1rem;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      overflow: hidden;
    }
    
    .card-header {
      background-color: var(--card-bg);
      padding: 0.8rem 1rem;
      border-bottom: 1px solid var(--border-color);
      font-weight: 600;
      display: flex;
      align-items: center;
      justify-content: space-between;
      color: var(--text-color);
    }
    
    .card-header i {
      color: var(--primary-light);
      margin-right: 0.5rem;
    }
    
    .grid-container {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(260px, 1fr));
      gap: 12px;
      padding: 12px;
    }
    
    .process-card {
      background-color: var(--card-bg);
      border-radius: 6px;
      padding: 12px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
      transition: all 0.2s ease;
      position: relative;
      overflow: hidden;
      border: 1px solid var(--border-color);
    }
    
    .process-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
      border-color: var(--primary-color);
    }
    
    .process-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 3px;
      height: 100%;
    }
    
    .process-card.online::before {
      background-color: var(--success-color);
    }
    
    .process-card.stopped::before {
      background-color: var(--danger-color);
    }
    
    .process-card.errored::before {
      background-color: var(--warning-color);
    }
    
    .process-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 12px;
    }
    
    .process-name {
      font-weight: 600;
      font-size: 0.95rem;
      color: var(--text-color);
      margin-right: 8px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      max-width: 160px;
    }
    
    .badge {
      font-weight: 500;
      padding: 0.25em 0.5em;
      font-size: 0.7em;
      border-radius: 4px;
    }
    
    .badge-online {
      background-color: var(--success-color);
      color: #ffffff;
    }
    
    .badge-stopped {
      background-color: var(--danger-color);
      color: #ffffff;
    }
    
    .badge-errored {
      background-color: var(--warning-color);
      color: #1F2937;
    }
    
    .process-stats {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 8px 10px;
      margin-bottom: 12px;
      font-size: 0.85rem;
    }
    
    .stat-item {
      display: flex;
      flex-direction: column;
    }
    
    .stat-value {
      font-weight: 600;
      font-size: 0.85rem;
      color: var(--text-color);
    }
    
    .stat-label {
      font-size: 0.7rem;
      color: var(--text-muted);
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    
    .btn {
      font-weight: 500;
      font-size: 0.75rem;
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      display: inline-flex;
      align-items: center;
      gap: 0.25rem;
      transition: all 0.2s ease;
    }
    
    .btn-outline-primary {
      color: var(--primary-light);
      border-color: var(--primary-light);
    }
    
    .btn-outline-primary:hover {
      background-color: var(--primary-color);
      border-color: var(--primary-color);
      color: white;
    }
    
    .btn-outline-secondary {
      color: var(--secondary-color);
      border-color: var(--secondary-color);
    }
    
    .btn-outline-secondary:hover {
      background-color: var(--secondary-color);
      color: white;
    }
    
    .btn-outline-danger {
      color: var(--danger-color);
      border-color: var(--danger-color);
    }
    
    .btn-outline-danger:hover {
      background-color: var(--danger-color);
      color: white;
    }
    
    .btn-outline-success {
      color: var(--success-color);
      border-color: var(--success-color);
    }
    
    .btn-outline-success:hover {
      background-color: var(--success-color);
      color: white;
    }
    
    .process-actions {
      display: flex;
      flex-wrap: wrap;
      gap: 6px;
    }
    
    .form-time {
      font-size: 0.8rem;
      color: var(--text-muted);
      font-weight: 500;
    }
    
    #notification {
      position: fixed;
      top: 15px;
      right: 15px;
      padding: 0.75rem 1rem;
      color: white;
      border-radius: 4px;
      display: none;
      z-index: 1000;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
      max-width: 300px;
      font-weight: 500;
      font-size: 0.85rem;
    }
    
    .refresh-indicator {
      display: flex;
      align-items: center;
      font-size: 0.75rem;
      color: var(--text-muted);
      gap: 0.5rem;
    }
    
    .refresh-dot {
      width: 6px;
      height: 6px;
      border-radius: 50%;
      background-color: var(--primary-light);
      animation: pulse 1.5s infinite;
    }
    
    @keyframes pulse {
      0% { opacity: 1; }
      50% { opacity: 0.4; }
      100% { opacity: 1; }
    }
    
    .empty-processes {
      text-align: center;
      padding: 30px;
      color: var(--text-muted);
      font-size: 0.95rem;
    }
    
    .empty-processes i {
      font-size: 2rem;
      margin-bottom: 1rem;
      color: var(--primary-light);
    }
    
    @media (max-width: 768px) {
      .grid-container {
        grid-template-columns: 1fr;
      }
    }
    
    .filter-controls {
      display: flex;
      gap: 8px;
      margin-bottom: 12px;
      flex-wrap: wrap;
    }
    
    .filter-btn {
      background-color: var(--card-bg);
      border: 1px solid var(--border-color);
      color: var(--text-color);
      border-radius: 4px;
      padding: 4px 10px;
      font-size: 0.75rem;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    
    .filter-btn:hover, .filter-btn.active {
      background-color: var(--primary-color);
      color: white;
      border-color: var(--primary-color);
    }
    
    .search-box {
      position: relative;
      flex-grow: 1;
      max-width: 250px;
    }
    
    .search-box input {
      width: 100%;
      border-radius: 4px;
      border: 1px solid var(--border-color);
      padding: 4px 16px 4px 30px;
      font-size: 0.8rem;
      background-color: var(--card-bg);
      color: var(--text-color);
      transition: all 0.2s ease;
    }
    
    .search-box i {
      position: absolute;
      left: 10px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-muted);
      font-size: 0.8rem;
    }
    
    .search-box input:focus {
      outline: none;
      border-color: var(--primary-color);
    }
    
    .bg-secondary {
      background-color: var(--secondary-color) !important;
    }
    
    .alert-danger {
      background-color: rgba(255, 86, 48, 0.1);
      border-color: rgba(255, 86, 48, 0.2);
      color: var(--danger-color);
      border-radius: 4px;
      font-size: 0.85rem;
      padding: 0.75rem;
    }
    
    .progress-bar-container {
      height: 4px;
      width: 100%;
      background-color: rgba(255, 255, 255, 0.1);
      border-radius: 2px;
      overflow: hidden;
      margin-bottom: 8px;
    }
    
    .progress-bar {
      height: 100%;
      border-radius: 2px;
      transition: width 0.3s ease;
    }
    
    .cpu-bar {
      background-color: var(--success-color);
    }
    
    .memory-bar {
      background-color: var(--primary-light);
    }
  </style>
</head>
<body>
  <div id="notification"></div>
  
  <nav class="navbar navbar-expand-lg mb-3">
    <div class="container">
      <a class="navbar-brand" href="/">
        <i class="bi bi-cloud"></i> SKYTEAM
      </a>
      <div class="d-flex align-items-center">
        <span class="refresh-indicator me-3">
          <span class="refresh-dot"></span>
          <span id="refreshStatus">Real-time updates</span>
        </span>
        <button class="btn btn-sm btn-outline-primary" onclick="location.reload()">
          <i class="bi bi-arrow-clockwise"></i> Refresh
        </button>
      </div>
    </div>
  </nav>
  
  <div class="container">
    <% if (error) { %>
      <div class="alert alert-danger">
        <i class="bi bi-exclamation-triangle"></i> Error: <%= error %>
      </div>
    <% } %>
    
    <div class="card mb-3">
      <div class="card-header">
        <div>
          <i class="bi bi-cpu"></i> Processes <span class="badge bg-secondary ms-2"><%= processes.length %></span>
        </div>
        <div class="form-time" id="time"></div>
      </div>
      <div class="card-body pt-2 pb-2">
        <div class="filter-controls">
          <div class="search-box">
            <i class="bi bi-search"></i>
            <input type="text" id="processSearch" placeholder="Search processes...">
          </div>
          <button class="filter-btn active" data-filter="all">All</button>
          <button class="filter-btn" data-filter="online">Online</button>
          <button class="filter-btn" data-filter="stopped">Stopped</button>
          <button class="filter-btn" data-filter="errored">Errored</button>
        </div>
        
        <div class="grid-container" id="processGrid">
          <% if (processes.length === 0) { %>
            <div class="empty-processes">
              <i class="bi bi-cloud-slash"></i>
              <p>No processes found</p>
              <p class="text-muted">Start some PM2 processes to see them here</p>
            </div>
          <% } else { %>
            <% processes.forEach(process => { %>
              <div class="process-card <%= process.status %>" data-status="<%= process.status %>" data-name="<%= process.name.toLowerCase() %>">
                <div class="process-header">
                  <div class="process-name" title="<%= process.name %>"><%= process.name %></div>
                  <% if (process.status === 'online') { %>
                    <span class="badge badge-online">Online</span>
                  <% } else if (process.status === 'stopped') { %>
                    <span class="badge badge-stopped">Stopped</span>
                  <% } else { %>
                    <span class="badge badge-errored"><%= process.status %></span>
                  <% } %>
                </div>
                
                <% if (process.status === 'online') { %>
                  <div class="progress-section mb-2">
                    <div class="stat-label mb-1">CPU: <%= process.cpu %></div>
                    <div class="progress-bar-container">
                      <div class="progress-bar cpu-bar" style="width: <%= parseInt(process.cpu) %>%"></div>
                    </div>
                    
                    <div class="stat-label mb-1">Memory: <%= process.memory %></div>
                    <div class="progress-bar-container">
                      <div class="progress-bar memory-bar" style="width: <%= Math.min(parseInt(process.memory) / 10, 100) %>%"></div>
                    </div>
                  </div>
                <% } %>
                
                <div class="process-stats">
                  <div class="stat-item">
                    <div class="stat-value"><%= process.id %></div>
                    <div class="stat-label">ID</div>
                  </div>
                  <div class="stat-item">
                    <div class="stat-value"><%= process.instances %></div>
                    <div class="stat-label">Instances</div>
                  </div>
                  <div class="stat-item">
                    <div class="stat-value"><%= process.uptime %></div>
                    <div class="stat-label">Uptime</div>
                  </div>
                  <div class="stat-item">
                    <div class="stat-value"><%= process.restarts %></div>
                    <div class="stat-label">Restarts</div>
                  </div>
                </div>
                <div class="process-actions">
                  <a href="/logs/<%= process.name %>" class="btn btn-sm btn-outline-secondary" data-bs-toggle="tooltip" title="View logs">
                    <i class="bi bi-file-text"></i> Logs
                  </a>
                  <button class="btn btn-sm btn-outline-primary" onclick="processAction('restart', <%= process.id %>)" data-bs-toggle="tooltip" title="Restart process">
                    <i class="bi bi-arrow-repeat"></i> Restart
                  </button>
                  <% if (process.status === 'online') { %>
                    <button class="btn btn-sm btn-outline-danger" onclick="processAction('stop', <%= process.id %>)" data-bs-toggle="tooltip" title="Stop process">
                      <i class="bi bi-stop-fill"></i> Stop
                    </button>
                  <% } else { %>
                    <button class="btn btn-sm btn-outline-success" onclick="processAction('start', <%= process.id %>)" data-bs-toggle="tooltip" title="Start process">
                      <i class="bi bi-play-fill"></i> Start
                    </button>
                  <% } %>
                  <button class="btn btn-sm btn-outline-danger delete-btn" onclick="confirmDelete(<%= process.id %>)" data-bs-toggle="tooltip" title="Delete process">
                    <i class="bi bi-trash"></i>
                  </button>
                </div>
              </div>
            <% }); %>
          <% } %>
        </div>
      </div>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Initialize tooltips
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
      return new bootstrap.Tooltip(tooltipTriggerEl, {
        delay: { show: 500, hide: 100 }
      })
    })
    
    // Socket.IO setup
    const socket = io();
    let isConnected = false;
    
    socket.on('connect', () => {
      console.log('Connected to server');
      isConnected = true;
      updateRefreshStatus('Real-time updates');
      
      // Request process updates
      socket.emit('subscribe_processes');
    });
    
    socket.on('disconnect', () => {
      console.log('Disconnected from server');
      isConnected = false;
      updateRefreshStatus('Connection lost');
    });
    
    socket.on('processes_update', (processes) => {
      updateProcesses(processes);
    });
    
    function updateRefreshStatus(text) {
      document.getElementById('refreshStatus').textContent = text;
    }
    
    function updateProcesses(processes) {
      const grid = document.getElementById('processGrid');
      const currentFilter = document.querySelector('.filter-btn.active').dataset.filter;
      const searchTerm = document.getElementById('processSearch').value.toLowerCase();
      
      // Clear the current grid except for the empty message
      if (!grid.querySelector('.empty-processes')) {
        while (grid.firstChild) {
          grid.removeChild(grid.firstChild);
        }
      } else if (processes.length > 0) {
        grid.innerHTML = '';
      }
      
      if (processes.length === 0) {
        const emptyDiv = document.createElement('div');
        emptyDiv.className = 'empty-processes';
        emptyDiv.innerHTML = `
          <i class="bi bi-cloud-slash"></i>
          <p>No processes found</p>
          <p class="text-muted">Start some PM2 processes to see them here</p>
        `;
        grid.appendChild(emptyDiv);
        return;
      }
      
      // Update the badge count
      const countBadge = document.querySelector('.card-header .badge');
      countBadge.textContent = processes.length;
      
      // Create each process card
      processes.forEach(process => {
        // Skip if it doesn't match the current filter
        if (currentFilter !== 'all' && process.status !== currentFilter) return;
        
        // Skip if it doesn't match the search term
        if (searchTerm && !process.name.toLowerCase().includes(searchTerm)) return;
        
        const card = document.createElement('div');
        card.className = `process-card ${process.status}`;
        card.dataset.status = process.status;
        card.dataset.name = process.name.toLowerCase();
        
        let badgeClass = 'badge-errored';
        if (process.status === 'online') badgeClass = 'badge-online';
        if (process.status === 'stopped') badgeClass = 'badge-stopped';
        
        let progressBars = '';
        if (process.status === 'online') {
          const cpuValue = parseInt(process.cpu);
          const memValue = Math.min(parseInt(process.memory) / 10, 100);
          
          progressBars = `
            <div class="progress-section mb-2">
              <div class="stat-label mb-1">CPU: ${process.cpu}</div>
              <div class="progress-bar-container">
                <div class="progress-bar cpu-bar" style="width: ${cpuValue}%"></div>
              </div>
              
              <div class="stat-label mb-1">Memory: ${process.memory}</div>
              <div class="progress-bar-container">
                <div class="progress-bar memory-bar" style="width: ${memValue}%"></div>
              </div>
            </div>
          `;
        }
        
        card.innerHTML = `
          <div class="process-header">
            <div class="process-name" title="${process.name}">${process.name}</div>
            <span class="badge ${badgeClass}">${process.status.charAt(0).toUpperCase() + process.status.slice(1)}</span>
          </div>
          
          ${progressBars}
          
          <div class="process-stats">
            <div class="stat-item">
              <div class="stat-value">${process.id}</div>
              <div class="stat-label">ID</div>
            </div>
            <div class="stat-item">
              <div class="stat-value">${process.instances}</div>
              <div class="stat-label">Instances</div>
            </div>
            <div class="stat-item">
              <div class="stat-value">${process.uptime}</div>
              <div class="stat-label">Uptime</div>
            </div>
            <div class="stat-item">
              <div class="stat-value">${process.restarts}</div>
              <div class="stat-label">Restarts</div>
            </div>
          </div>
          <div class="process-actions">
            <a href="/logs/${process.name}" class="btn btn-sm btn-outline-secondary" data-bs-toggle="tooltip" title="View logs">
              <i class="bi bi-file-text"></i> Logs
            </a>
            <button class="btn btn-sm btn-outline-primary" onclick="processAction('restart', ${process.id})" data-bs-toggle="tooltip" title="Restart process">
              <i class="bi bi-arrow-repeat"></i> Restart
            </button>
            ${process.status === 'online' 
              ? `<button class="btn btn-sm btn-outline-danger" onclick="processAction('stop', ${process.id})" data-bs-toggle="tooltip" title="Stop process">
                  <i class="bi bi-stop-fill"></i> Stop
                 </button>`
              : `<button class="btn btn-sm btn-outline-success" onclick="processAction('start', ${process.id})" data-bs-toggle="tooltip" title="Start process">
                  <i class="bi bi-play-fill"></i> Start
                 </button>`
            }
            <button class="btn btn-sm btn-outline-danger delete-btn" onclick="confirmDelete(${process.id})" data-bs-toggle="tooltip" title="Delete process">
              <i class="bi bi-trash"></i>
            </button>
          </div>
        `;
        
        grid.appendChild(card);
      });
      
      // Reinitialize tooltips
      var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
      var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl, {
          delay: { show: 500, hide: 100 }
        })
      });
    }
    
    // Process actions
    function processAction(action, id) {
      const actionButton = event.target.closest('button');
      const originalHTML = actionButton.innerHTML;
      
      // Show loading state
      actionButton.disabled = true;
      actionButton.innerHTML = '<i class="bi bi-hourglass-split"></i> Processing...';
      
      fetch(`/api/${action}/${id}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          showNotification(`Process ${action} command executed successfully`, false);
          
          // If we're connected via socket.io, don't reload - wait for update
          if (!isConnected) {
            setTimeout(() => {
              location.reload();
            }, 1000);
          }
        } else {
          actionButton.disabled = false;
          actionButton.innerHTML = originalHTML;
          showNotification(`Error: ${data.error}`, true);
        }
      })
      .catch(err => {
        actionButton.disabled = false;
        actionButton.innerHTML = originalHTML;
        showNotification(`Error: ${err.message}`, true);
      });
    }
    
    function confirmDelete(id) {
      if (confirm('Are you sure you want to delete this process? This action cannot be undone!')) {
        processAction('delete', id);
      }
    }

    function showNotification(message, isError = false) {
      const notification = document.getElementById('notification');
      notification.textContent = message;
      notification.style.backgroundColor = isError ? 'rgba(255, 86, 48, 0.9)' : 'rgba(54, 179, 126, 0.9)';
      notification.style.color = 'white';
      notification.style.display = 'block';
      
      setTimeout(() => {
        notification.style.display = 'none';
      }, 3000);
    }
    
    // Filter functionality
    document.querySelectorAll('.filter-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        // Update active button
        document.querySelector('.filter-btn.active').classList.remove('active');
        btn.classList.add('active');
        
        const filter = btn.dataset.filter;
        const cards = document.querySelectorAll('.process-card');
        const searchTerm = document.getElementById('processSearch').value.toLowerCase();
        
        cards.forEach(card => {
          const matchesFilter = filter === 'all' || card.dataset.status === filter;
          const matchesSearch = !searchTerm || card.dataset.name.includes(searchTerm);
          
          if (matchesFilter && matchesSearch) {
            card.style.display = '';
          } else {
            card.style.display = 'none';
          }
        });
      });
    });
    
    // Search functionality
    document.getElementById('processSearch').addEventListener('input', (e) => {
      const searchTerm = e.target.value.toLowerCase();
      const currentFilter = document.querySelector('.filter-btn.active').dataset.filter;
      const cards = document.querySelectorAll('.process-card');
      
      cards.forEach(card => {
        const matchesFilter = currentFilter === 'all' || card.dataset.status === currentFilter;
        const matchesSearch = !searchTerm || card.dataset.name.includes(searchTerm);
        
        if (matchesFilter && matchesSearch) {
          card.style.display = '';
        } else {
          card.style.display = 'none';
        }
      });
    });

    // Display time
    function updateTime() {
      const now = new Date();
      const options = { 
        weekday: 'short',
        month: 'short', 
        day: 'numeric',
        hour: '2-digit', 
        minute: '2-digit',
        second: '2-digit'
      };
      
      document.getElementById('time').textContent = now.toLocaleString('en-US', options);
    }

    setInterval(updateTime, 1000);
    updateTime();
    
    // Handle reconnection
    socket.io.on('reconnect', () => {
  console.log('Reconnected to server');
  isConnected = true;
  updateRefreshStatus('Real-time updates');
  showNotification('Reconnected to server', false);
  
  // Request process updates
  socket.emit('subscribe_processes');
});

// Handle disconnect
socket.io.on('disconnect', () => {
  console.log('Disconnected from server');
  isConnected = false;
  updateRefreshStatus('Manual refresh');
  showNotification('Disconnected from server', true);
});
  </script>
</body>
</html>