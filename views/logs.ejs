<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500&display=swap" rel="stylesheet">
  <script src="/socket.io/socket.io.js"></script>
  <style>
    :root {
      --primary-color: #0052CC;
      --primary-dark: #003D99;
      --primary-light: #4C9AFF;
      --secondary-color: #505F79;
      --success-color: #36B37E;
      --warning-color: #FFAB00;
      --danger-color: #FF5630;
      --info-color: #64B5F6;
      --dark-bg: #0A1929;
      --card-bg: #132F4C;
      --log-bg: #0F1723;
      --border-color: #1E4976;
      --text-color: #F4F5F7;
      --text-muted: #A6B5C9;
      --line-number-bg: #0A1321;
      --line-number-color: #4C6380;
    }
    
    body {
      background-color: var(--dark-bg);
      color: var(--text-color);
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
      line-height: 1.5;
      min-height: 100vh;
      position: relative;
    }
    
    .navbar {
      background-color: var(--card-bg);
      border-bottom: 1px solid var(--border-color);
      padding: 0.6rem 1rem;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    }
    
    .navbar-brand {
      font-weight: 700;
      color: var(--text-color);
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 1.25rem;
      letter-spacing: 1px;
    }
    
    .navbar-brand i {
      color: var(--primary-light);
    }
    
    .card {
      border: none;
      border-radius: 6px;
      background-color: var(--card-bg);
      margin-bottom: 1rem;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      overflow: hidden;
    }
    
    .card-header {
      background-color: var(--card-bg);
      padding: 0.8rem 1rem;
      border-bottom: 1px solid var(--border-color);
      font-weight: 600;
      display: flex;
      align-items: center;
      justify-content: space-between;
      color: var(--text-color);
    }
    
    .card-header i {
      color: var(--primary-light);
      margin-right: 0.5rem;
    }
    
    .btn {
      font-weight: 500;
      font-size: 0.75rem;
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      display: inline-flex;
      align-items: center;
      gap: 0.25rem;
      transition: all 0.2s ease;
    }
    
    .btn-outline-primary {
      color: var(--primary-light);
      border-color: var(--primary-light);
    }
    
    .btn-outline-primary:hover {
      background-color: var(--primary-color);
      border-color: var(--primary-color);
      color: white;
    }
    
    .btn-outline-secondary {
      color: var(--secondary-color);
      border-color: var(--secondary-color);
    }
    
    .btn-outline-secondary:hover {
      background-color: var(--secondary-color);
      color: white;
    }
    
    .btn-outline-success {
      color: var(--success-color);
      border-color: var(--success-color);
    }
    
    .btn-outline-success:hover {
      background-color: var(--success-color);
      color: white;
    }
    
    .btn-outline-danger {
      color: var(--danger-color);
      border-color: var(--danger-color);
    }
    
    .btn-outline-danger:hover {
      background-color: var(--danger-color);
      color: white;
    }
    
    .form-time {
      font-size: 0.8rem;
      color: var(--text-muted);
      font-weight: 500;
    }
    
    .logs-container {
      background-color: var(--log-bg);
      border: 1px solid var(--border-color);
      border-radius: 4px;
      height: 70vh;
      overflow-y: auto;
      color: var(--text-color);
      position: relative;
      font-size: 0.85rem;
      line-height: 1.5;
      font-family: 'JetBrains Mono', monospace;
    }

    .logs-container::-webkit-scrollbar {
      width: 8px;
    }

    .logs-container::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.05);
    }

    .logs-container::-webkit-scrollbar-thumb {
      background-color: rgba(0, 82, 204, 0.3);
      border-radius: 4px;
    }
    
    .logs-container::-webkit-scrollbar-thumb:hover {
      background-color: rgba(0, 82, 204, 0.5);
    }
    
    .log-info {
      color: var(--info-color);
    }
    
    .log-error {
      color: var(--danger-color);
    }
    
    .log-warning {
      color: var(--warning-color);
    }
    
    .process-badge {
      display: inline-flex;
      align-items: center;
      background-color: rgba(0, 82, 204, 0.2);
      color: var(--primary-light);
      font-weight: 500;
      padding: 0.25em 0.5em;
      font-size: 0.8em;
      border-radius: 4px;
      margin-left: 0.5rem;
    }
    
    .alert-danger {
      background-color: rgba(255, 86, 48, 0.1);
      border-color: rgba(255, 86, 48, 0.2);
      color: var(--danger-color);
      border-radius: 4px;
      font-size: 0.85rem;
      padding: 0.75rem;
    }
    
    .live-indicator {
      display: inline-flex;
      align-items: center;
      margin-left: 1rem;
      font-size: 0.75rem;
      color: var(--success-color);
    }
    
    .live-indicator .dot {
      width: 6px;
      height: 6px;
      border-radius: 50%;
      background-color: var(--success-color);
      margin-right: 0.5rem;
      animation: pulse 1.5s infinite;
    }
    
    @keyframes pulse {
      0% { opacity: 1; }
      50% { opacity: 0.4; }
      100% { opacity: 1; }
    }
    
    .connection-status {
      position: fixed;
      bottom: 1rem;
      right: 1rem;
      padding: 0.5rem 0.75rem;
      font-size: 0.75rem;
      border-radius: 4px;
      background-color: var(--success-color);
      color: white;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      z-index: 1000;
      opacity: 0;
      transform: translateY(1rem);
      transition: opacity 0.3s, transform 0.3s;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    }
    
    .connection-status.visible {
      opacity: 1;
      transform: translateY(0);
    }
    
    .connection-status.reconnecting {
      background-color: var(--warning-color);
    }
    
    .connection-status.disconnected {
      background-color: var(--danger-color);
    }
    
    .buffer-control {
      display: flex;
      justify-content: space-between;
      padding: 0.5rem 0 0.75rem 0;
      color: var(--text-muted);
      font-size: 0.8rem;
    }
    
    .follow-logs {
      cursor: pointer;
      display: flex;
      align-items: center;
      margin-right: 1rem;
    }
    
    .follow-logs input {
      margin-right: 0.5rem;
      accent-color: var(--primary-color);
    }
    
    .clear-logs {
      cursor: pointer;
      color: var(--text-muted);
      font-size: 0.8rem;
      background: none;
      border: none;
      padding: 0;
      display: flex;
      align-items: center;
      gap: 0.25rem;
    }
    
    .clear-logs:hover {
      color: var(--text-color);
    }
    
    .log-settings {
      display: flex;
      align-items: center;
      gap: 1rem;
    }
    
    .log-buffer-size {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    
    .log-buffer-size select {
      background-color: var(--card-bg);
      color: var(--text-color);
      border: 1px solid var(--border-color);
      border-radius: 4px;
      padding: 0.25rem 0.5rem;
      font-size: 0.75rem;
    }
    
    .log-type-filter {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      background-color: var(--log-bg);
      border: 1px solid var(--border-color);
      border-radius: 4px;
      padding: 0.25rem;
    }
    
    .log-type-btn {
      border: none;
      background: none;
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-size: 0.75rem;
      cursor: pointer;
      transition: all 0.2s ease;
      color: var(--text-muted);
    }
    
    .log-type-btn.active {
      background-color: var(--primary-color);
      color: white;
    }
    
    .log-search {
      position: relative;
      margin-left: auto;
    }
    
    .log-search input {
      border: 1px solid var(--border-color);
      border-radius: 4px;
      padding: 0.25rem 0.75rem 0.25rem 2rem;
      font-size: 0.75rem;
      background-color: var(--card-bg);
      color: var(--text-color);
    }
    
    .log-search input:focus {
      outline: none;
      border-color: var(--primary-color);
    }
    
    .log-search i {
      position: absolute;
      left: 0.75rem;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-muted);
    }
    
    .empty-logs {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100%;
      color: var(--text-muted);
    }
    
    .empty-logs i {
      font-size: 2rem;
      margin-bottom: 1rem;
      color: var(--primary-light);
    }
    
    .timestamp {
      color: var(--text-muted);
      font-size: 0.7rem;
      margin-right: 0.5rem;
    }
    
    .action-bar {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 0.75rem;
    }
    
    .action-group {
      display: flex;
      gap: 0.5rem;
    }
    
    .log-line {
      display: flex;
      position: relative;
      border-bottom: 1px solid rgba(30, 73, 118, 0.1);
    }
    
    .log-line:hover {
      background-color: rgba(0, 82, 204, 0.1);
    }
    
    .line-number {
      flex: 0 0 50px;
      background-color: var(--line-number-bg);
      color: var(--line-number-color);
      text-align: right;
      padding: 0 8px;
      user-select: none;
      border-right: 1px solid var(--border-color);
      font-size: 0.75rem;
    }
    
    .line-content {
      flex: 1;
      padding: 0 8px;
      white-space: pre-wrap;
    }
    
    #notification {
      position: fixed;
      top: 15px;
      right: 15px;
      padding: 0.75rem 1rem;
      color: white;
      border-radius: 4px;
      display: none;
      z-index: 1000;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
      max-width: 300px;
      font-weight: 500;
      font-size: 0.85rem;
    }
  </style>
</head>
<body>
  <div id="notification"></div>
  
  <nav class="navbar mb-3">
    <div class="container">
      <a class="navbar-brand" href="/">
        <i class="bi bi-cloud"></i> SKYTEAM
      </a>
      <div class="d-flex gap-2">
        <a href="/" class="btn btn-sm btn-outline-secondary">
          <i class="bi bi-arrow-left"></i> Back
        </a>
        <button id="streamToggle" class="btn btn-sm btn-outline-success">
          <i class="bi bi-pause-fill"></i> Pause
        </button>
        <button id="clearLogs" class="btn btn-sm btn-outline-secondary">
          <i class="bi bi-trash"></i> Clear
        </button>
        <button id="downloadLogs" class="btn btn-sm btn-outline-primary">
          <i class="bi bi-download"></i> Download
        </button>
      </div>
    </div>
  </nav>
  
  <div class="connection-status">
    <i class="bi bi-wifi"></i> <span id="connectionStatusText">Connected</span>
  </div>
  
  <div class="container">
    <% if (error) { %>
      <div class="alert alert-danger">
        <i class="bi bi-exclamation-triangle"></i> Error: <%= error %>
      </div>
    <% } %>
    
    <div class="card">
      <div class="card-header">
        <div class="d-flex align-items-center">
          <i class="bi bi-file-text"></i> Logs 
          <span class="process-badge"><%= processName %></span>
          <span class="live-indicator">
            <span class="dot"></span> LIVE
          </span>
        </div>
        <div class="form-time" id="time"></div>
      </div>
      <div class="card-body p-2">
        <div class="action-bar">
          <div class="action-group">
            <div class="log-type-filter">
              <button class="log-type-btn active" data-type="all">All</button>
              <button class="log-type-btn" data-type="error">Errors</button>
              <button class="log-type-btn" data-type="warning">Warnings</button>
              <button class="log-type-btn" data-type="info">Info</button>
            </div>
          </div>
          
          <div class="log-search">
            <i class="bi bi-search"></i>
            <input type="text" id="logSearch" placeholder="Search logs...">
          </div>
        </div>
        
        <div class="buffer-control">
          <div class="log-settings">
            <label class="follow-logs">
              <input type="checkbox" id="followLogs" checked> Auto-scroll
            </label>
            <div class="log-buffer-size">
              <span>Buffer size:</span>
              <select id="bufferSize">
                <option value="1000">1,000 lines</option>
                <option value="5000" selected>5,000 lines</option>
                <option value="10000">10,000 lines</option>
              </select>
            </div>
          </div>
          <button class="clear-logs" id="clearLogsBtn">
            <i class="bi bi-trash"></i> Clear logs
          </button>
        </div>
        
        <div class="logs-container" id="logs-container">
          <% if (logs.length === 0) { %>
            <div class="empty-logs">
              <i class="bi bi-cloud-slash"></i>
              <p>Waiting for logs...</p>
              <p class="text-muted">Logs will appear here in real-time</p>
            </div>
          <% } else { %>
            <% 
              const logLines = logs.split('\n').filter(line => line.trim() !== '');
              logLines.forEach((line, index) => {
                const formattedLine = line
                  .replace(/\[ERROR\]|\bERROR\b|Error:/gi, match => `<span class="log-error">${match}</span>`)
                  .replace(/\[INFO\]|\bINFO\b|info:/gi, match => `<span class="log-info">${match}</span>`)
                  .replace(/\[WARN\]|\bWARN\b|\bWARNING\b|warn:/gi, match => `<span class="log-warning">${match}</span>`);
                
                let logType = 'normal';
                if (/\[ERROR\]|\bERROR\b|Error:/i.test(line)) logType = 'error';
                else if (/\[WARN\]|\bWARN\b|\bWARNING\b|warn:/i.test(line)) logType = 'warning';
                else if (/\[INFO\]|\bINFO\b|info:/i.test(line)) logType = 'info';
            %>
              <div class="log-line" data-type="<%= logType %>">
                <div class="line-number"><%= index + 1 %></div>
                <div class="line-content"><%= formattedLine %></div>
              </div>
            <% }); %>
          <% } %>
        </div>
      </div>
    </div>
  </div>
  
  <script>
    // Socket.IO setup
    const socket = io();
    const logsContainer = document.getElementById('logs-container');
    const processName = '<%= processName %>';
    const followLogsCheckbox = document.getElementById('followLogs');
    const bufferSizeSelect = document.getElementById('bufferSize');
    const streamToggle = document.getElementById('streamToggle');
    const clearLogsBtn = document.getElementById('clearLogsBtn');
    const downloadLogsBtn = document.getElementById('downloadLogs');
    const connectionStatus = document.querySelector('.connection-status');
    const connectionStatusText = document.getElementById('connectionStatusText');
    const logSearch = document.getElementById('logSearch');
    const logTypeButtons = document.querySelectorAll('.log-type-btn');
    const liveIndicator = document.querySelector('.live-indicator');
    const notification = document.getElementById('notification');
    
    let isStreaming = true;
    let bufferSize = parseInt(bufferSizeSelect.value);
    let logLines = 0;
    let currentFilter = 'all';
    let searchTerm = '';
    let lineCounter = 0;
    
    // Function to determine log type
    function getLogType(text) {
      if (/\[ERROR\]|\bERROR\b|Error:/i.test(text)) return 'error';
      if (/\[WARN\]|\bWARN\b|\bWARNING\b|warn:/i.test(text)) return 'warning';
      if (/\[INFO\]|\bINFO\b|info:/i.test(text)) return 'info';
      return 'normal';
    }
    
    // Function to filter logs by type and search term
    function filterLogs() {
      const logLines = logsContainer.querySelectorAll('.log-line');
      
      logLines.forEach(line => {
        const logType = line.getAttribute('data-type');
        const logText = line.querySelector('.line-content').textContent.toLowerCase();
        
        const matchesType = currentFilter === 'all' || logType === currentFilter;
        const matchesSearch = !searchTerm || logText.includes(searchTerm);
        
        line.style.display = matchesType && matchesSearch ? '' : 'none';
      });
    }
    
    // Function to format log data with syntax highlighting and timestamp
    function formatLogLine(text) {
      const timestamp = new Date().toLocaleTimeString();
      
      let formattedText = text
        .replace(/\[ERROR\]|\bERROR\b|Error:/gi, match => `<span class="log-error">${match}</span>`)
        .replace(/\[INFO\]|\bINFO\b|info:/gi, match => `<span class="log-info">${match}</span>`)
        .replace(/\[WARN\]|\bWARN\b|\bWARNING\b|warn:/gi, match => `<span class="log-warning">${match}</span>`);
      
      return `<span class="timestamp">[${timestamp}]</span>${formattedText}`;
    }
    
    // Function to add a new log line
    function addLogLine(text, type = 'normal') {
      // Increment line counter
      lineCounter++;
      
      // Remove empty logs message if present
      const emptyLogs = logsContainer.querySelector('.empty-logs');
      if (emptyLogs) {
        logsContainer.removeChild(emptyLogs);
      }
      
      // Create log line element
      const logLine = document.createElement('div');
      logLine.className = 'log-line';
      logLine.setAttribute('data-type', type);
      
      // Create line number element
      const lineNumber = document.createElement('div');
      lineNumber.className = 'line-number';
      lineNumber.textContent = lineCounter;
      
      // Create line content element
      const lineContent = document.createElement('div');
      lineContent.className = 'line-content';
      lineContent.innerHTML = formatLogLine(text);
      
      // Assemble log line
      logLine.appendChild(lineNumber);
      logLine.appendChild(lineContent);
      
      // Append to container
      logsContainer.appendChild(logLine);
      logLines++;
      
      // Apply current filters
      const matchesType = currentFilter === 'all' || type === currentFilter;
      const matchesSearch = !searchTerm || text.toLowerCase().includes(searchTerm);
      logLine.style.display = matchesType && matchesSearch ? '' : 'none';
      
      // Enforce buffer size limit
      while (logLines > bufferSize) {
        if (logsContainer.firstChild && logsContainer.firstChild.classList.contains('log-line')) {
          logsContainer.removeChild(logsContainer.firstChild);
          logLines--;
        } else if (logsContainer.firstChild) {
          // Skip non-log line elements (like empty logs message)
          const nextSibling = logsContainer.firstChild.nextSibling;
          if (nextSibling) {
            logsContainer.removeChild(nextSibling);
          } else {
            break;
          }
        } else {
          break;
        }
      }
      
      // Auto-scroll if enabled
      scrollToBottom();
    }
    
    // Function to add system message
    function addSystemMessage(type, message) {
      const timestamp = new Date().toLocaleTimeString();
      let className = '';
      
      if (type === 'error') className = 'log-error';
      else if (type === 'warning') className = 'log-warning';
      else if (type === 'info') className = 'log-info';
      
      // Increment line counter
      lineCounter++;
      
      // Create log line elements
      const logLine = document.createElement('div');
      logLine.className = 'log-line';
      logLine.setAttribute('data-type', type);
      
      const lineNumber = document.createElement('div');
      lineNumber.className = 'line-number';
      lineNumber.textContent = lineCounter;
      
      const lineContent = document.createElement('div');
      lineContent.className = 'line-content';
      lineContent.innerHTML = `<span class="timestamp">[${timestamp}]</span><span class="${className}">[SYSTEM] ${message}</span>`;
      
      logLine.appendChild(lineNumber);
      logLine.appendChild(lineContent);
      
      logsContainer.appendChild(logLine);
      logLines++;
      
      scrollToBottom();
    }
    
    // Function to auto-scroll to bottom if enabled
    function scrollToBottom() {
      if (followLogsCheckbox.checked) {
        logsContainer.scrollTop = logsContainer.scrollHeight;
      }
    }
    
    // Function to show notification
    function showNotification(message, isError = false) {
      notification.textContent = message;
      notification.style.backgroundColor = isError ? 'rgba(255, 86, 48, 0.9)' : 'rgba(54, 179, 126, 0.9)';
      notification.style.color = 'white';
      notification.style.display = 'block';
      
      setTimeout(() => {
        notification.style.display = 'none';
      }, 3000);
    }
    
    // Function to update live indicator
    function updateLiveIndicator() {
      if (isStreaming) {
        liveIndicator.innerHTML = '<span class="dot"></span> LIVE';
        liveIndicator.style.color = 'var(--success-color)';
        liveIndicator.querySelector('.dot').style.backgroundColor = 'var(--success-color)';
      } else {
        liveIndicator.innerHTML = '<span class="dot"></span> PAUSED';
        liveIndicator.style.color = 'var(--danger-color)';
        liveIndicator.querySelector('.dot').style.backgroundColor = 'var(--danger-color)';
      }
    }
    
    // Function to download logs
    function downloadLogs() {
      // Get all visible log lines
      const visibleLogs = [];
      const logLineElements = logsContainer.querySelectorAll('.log-line');
      
      logLineElements.forEach(line => {
        if (line.style.display !== 'none') {
          const lineNum = line.querySelector('.line-number').textContent;
          const content = line.querySelector('.line-content').textContent;
          visibleLogs.push(`${lineNum}: ${content}`);
        }
      });
      
      // Create blob and download
      const blob = new Blob([visibleLogs.join('\n')], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      
      a.href = url;
      a.download = `${processName}_logs_${new Date().toISOString().replace(/[:.]/g, '-')}.txt`;
      document.body.appendChild(a);
      a.click();
      
      setTimeout(() => {
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      }, 100);
      
      showNotification('Logs downloaded successfully');
    }
    
    // Count initial log lines
    const initialLogLines = logsContainer.querySelectorAll('.log-line').length;
    logLines = initialLogLines;
    lineCounter = initialLogLines;
    
    // Start the log stream when page loads
    socket.on('connect', () => {
      console.log('Connected to server');
      connectionStatus.classList.add('visible');
      connectionStatus.classList.remove('reconnecting', 'disconnected');
      connectionStatusText.textContent = 'Connected';
      
      setTimeout(() => {
        connectionStatus.classList.remove('visible');
      }, 3000);
      
      // Remove empty logs message if present
      const emptyLogs = logsContainer.querySelector('.empty-logs');
      if (emptyLogs) {
        logsContainer.removeChild(emptyLogs);
      }
      
      // Request log stream for this process
      socket.emit('stream_logs', { processName });
    });
    
    // Handle reconnecting
    socket.on('reconnecting', (attemptNumber) => {
      console.log('Reconnecting...', attemptNumber);
      connectionStatus.classList.add('visible', 'reconnecting');
      connectionStatus.classList.remove('disconnected');
      connectionStatusText.textContent = `Reconnecting (${attemptNumber})...`;
    });
    
    // Handle reconnect
    socket.io.on('reconnect', () => {
      console.log('Reconnected to server');
      connectionStatus.classList.add('visible');
      connectionStatus.classList.remove('reconnecting', 'disconnected');
      connectionStatusText.textContent = 'Reconnected';
      
      setTimeout(() => {
        connectionStatus.classList.remove('visible');
      }, 3000);
    });
    
    // Handle disconnect
    socket.io.on('disconnect', () => {
      console.log('Disconnected from server');
      connectionStatus.classList.add('visible', 'disconnected');
      connectionStatus.classList.remove('reconnecting');
      connectionStatusText.textContent = 'Disconnected';
      
      setTimeout(() => {
        connectionStatus.classList.remove('visible');
      }, 3000);
    });
  </script>
</body>
</html>